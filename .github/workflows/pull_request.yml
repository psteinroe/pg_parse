name: Pull Request

on:
  workflow_dispatch:
  pull_request:
    paths:
      # Only run when changes are made to rust code or root Cargo
      - "crates/**"
      - "wasm_example/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - "rust-toolchain.toml"
      - "rustfmt.toml"
      # or in workflows
      - ".github/workflows/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_LOG: info
  RUST_BACKTRACE: 1
  RUSTUP_WINDOWS_PATH_ADD_BIN: 1

jobs:
  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4

      - name: Install toolchain
        uses: moonrepo/setup-rust@v1
        with:
          components: rustfmt
          bins: taplo-cli
          cache-base: main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run format
        run: cargo fmt --all --check

  actionlint:
    name: Lint GitHub Actions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download actionlint
        id: get_actionlint
        run: bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
        shell: bash
      - name: Check workflow files
        run: ${{ steps.get_actionlint.outputs.executable }} -color
        shell: bash

  lint:
    name: Lint Project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR Branch
        uses: actions/checkout@v4

      - name: Install toolchain
        uses: moonrepo/setup-rust@v1
        with:
          components: clippy
          cache-base: main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Lints
        run: cargo clippy --fix

      - name: Check for changes
        run: |
          if [[ $(git status --porcelain) ]]; then
            git status
            git diff
            exit 1
          fi

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-2022
          - os: ubuntu-22.04
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4

      - name: Install toolchain
        uses: moonrepo/setup-rust@v1
        with:
          cache-base: main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run tests
        run: cargo test --workspace

  test-wasm:
    name: Test WASM Build
    runs-on: ubuntu-22.04
    env:
      EM_VERSION: 3.1.45
      EM_CACHE_FOLDER: 'emsdk-cache'
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4

      - name: Install toolchain
        uses: moonrepo/setup-rust@v1
        with:
          cache-base: main
          targets: wasm32-unknown-emscripten

      - name: Setup cache
        id: cache-system-libraries
        uses: actions/cache@v4
        with:
          path: ${{env.EM_CACHE_FOLDER}}
          key: ${{env.EM_VERSION}}-${{ runner.os }}

      - uses: pyodide/setup-emsdk@v15
        with:
          version: ${{env.EM_VERSION}}
          actions-cache-folder: ${{env.EM_CACHE_FOLDER}}

      - name: Install Node.js
        uses: actions/setup-node@v4

      - name: Install just
        uses: extractions/setup-just@v1

      - name: Test WASM build
        working-directory: ./wasm_example
        run: |
          source "$EMSDK/emsdk_env.sh"
          just test-native

